set.seed(13234)
fitTrain <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
### Calculating the misclassification error
missClass(trainSA$chd, predict(modelFit, trainSA))
missClass(testSA$chd, predict(modelFit, testSA))
summary(modelFit)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
### Calculating the misclassification error
missClass(trainSA$chd, predict(modelFit, trainSA))
missClass(testSA$chd, predict(modelFit, testSA))
randomForest
library(randomForest)
randomForest()
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.test)
str(vowel.train)
randomForest(y ~., vowel.train)
rf <- randomForest(y ~., vowel.train)
summary(rf)
qplot(rf)
plot(rf)
order(rf)
varImp(rf)
varImp
modelRF <- train(y ~., method="rf", data=vowel.train)
varImp(modelRF)
varImp(modelRF$pred)
?varImp
class(modelRF)
modelRF <- train(y ~., method="rf", data=vowel.train, importance=TRUE)
varImp(modelRF)
modelRF2 <- randomForest(y ~., data=vowel.train)
varImp(modelRF2)
summary(modelRF2)
modelRF <- train(y ~., method="rf", data=vowel.train, importance=TRUE)
varImp(modelRF, vowel.test)
varImp(vowel.test)
modelRF2 <- randomForest(y ~., data=vowel.test)
varImp(modelRF2)
?randomForest
modelRF2 <- randomForest(y ~., data=vowel.test, importance=TRUE)
varImp(modelRF2)
order(varImp(modelRF2))
order(desc(varImp(modelRF2)))
order(varImp(modelRF2))
str(vowel.test)
str(vowel.train)
combine <- rbind(vowel.train, vowel.test)
modelRF2 <- randomForest(y ~., data=combine, importance=TRUE)
order(varImp(modelRF2))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(ElemStatLearn)
library(rpart)
library(pgmm)
Answer:
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.70, list=FALSE)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
modFit <- train(Case ~., method="rpart", data=training)
modFit$finalModel
z.auto <- rpart(Mileage ~ Weight, car.test.frame)
predict(z.auto)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
predict(fit, type = "prob")   # class probabilities (default)
predict(fit, type = "vector") # level numbers
predict(fit, type = "class")  # factor
predict(fit, type = "matrix") # level number, class frequencies, probabilities
sub <- c(sample(1:50, 25), sample(51:100, 25), sample(101:150, 25))
fit <- rpart(Species ~ ., data = iris, subset = sub)
fit
table(predict(fit, iris[-sub,], type = "class"), iris[-sub, "Species"])
predict(modelFit$finalModel)
predict(modelFit$finalModel, c(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2))
predict(modelFit$finalModel, c((TotalIntench2 = 23,000), (FiberWidthCh1 = 10), (PerimStatusCh1=2))
predict(modelFit$finalModel, c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
predict(modelFit$finalModel, c((TotalIntench2 = 23000), (FiberWidthCh1 = 10), (PerimStatusCh1=2))
)
modelFit$finalModel
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.70, list=FALSE)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
modFit <- train(Case ~., method="rpart", data=training)
modFit$finalModel
predict(modFit$finalModel, c((TotalIntench2 = 23000), (FiberWidthCh1 = 10), (PerimStatusCh1=2))
)
modFit$finalModel
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = "Eye", type = "multiBarChart", data = subset(haireye, Sex == "Male"))
n1$save('fig/n1.html', cdn = TRUE)
cat('<iframe src = "fig/n1.html", width=100, height=600></iframe>')
nPlot
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
library(plotly)
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
library(ggplot2)
library(ggplot)
library(ggplot2)
library(caret)
library(caret)
library(randomForest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
Answer:
set.seed(33833)
modelFit_rf <- randomForest(y ~., data=vowel.train)
modelFit_gbm <- train(y ~., data=vowel.train, method="gbm")
set.seed(33833)
modelFit_rf <- randomForest(as.factor(y) ~., data=vowel.train)
modelFit_gbm <- train(as.factor(y) ~., data=vowel.train, method="gbm")
summary(modelFit_gbm)
summary(modelFit_rf)
modelFit_rf$confusion
modelFit_rf$forest
modelFit_rf$test
modelFit_gbm$finalModel
confusionMatrix(vowel.test$y, predict(modelFit_gbm, vowel.test))
confusionMatrix(vowel.test$y, predict(modelFit_gbm, vowel.test$y))
confusionMatrix(vowel.test, predict(modelFit_gbm, vowel.test))
table(vowel.test$y, predict(modelFit_gbm, vowel.test))
summary(table(vowel.test$y, predict(modelFit_gbm, vowel.test)))
table(vowel.test$y, predict(modelFit_gbm, vowel.test))
postResample(vowel.test$y, predict(modelFit_gbm, vowel.test))
summary(vowel.test$y, predict(modelFit_gbm, vowel.test))
library(caret)
library(randomForest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
modelFit_rf <- randomForest(as.factor(y) ~., data=vowel.train)
modelFit_gbm <- train(as.factor(y) ~., data=vowel.train, method="gbm")
mean(vowel.test$y == predict(modelFit_rf, vowel.test))
mean(vowel.test$y == predict(modelFit_gbm, vowel.test))
modelFit_rf$confusion
modelFit_rf$confusion[, 'class.error']
confusionMatrix(vowel.test$y, predict(modelFit_rf, vowel.test))
confusionMatrix(predict(modelFit_rf, vowel.test), vowel.test$y)
modelFit_rf <- randomForest(as.factor(y) ~., data=vowel.train, metric = "Accuracy")
confusionMatrix(predict(modelFit_rf, vowel.test), vowel.test$y)
is.na(vowel.test)
sum(is.na(vowel.test))
sum(is.na(vowel.train))
confusionMatrix(predict(modelFit_rf, vowel.test), as.factor(vowel.test$y))
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelFit_rf <- randomForest(y ~., data=vowel.train)
confusionMatrix(predict(modelFit_rf, vowel.test), vowel.test$y)
set.seed(33833)
modelFit_rf <- randomForest(y ~., data=vowel.train)
modelFit_gbm <- train(y ~., data=vowel.train, method="gbm")
confusionMatrix(predict(modelFit_gbm, vowel.test), vowel.test$y)
set.seed(33833)
modelFit_rf <- randomForest(y ~., data=vowel.train)
modelFit_gbm <- train(y ~., data=vowel.train, method="gbm", verbose = FALSE)
confusionMatrix(predict(modelFit_gbm, vowel.test), vowel.test$y)
equalPredictions <- predict(modelFit_rf, vowel.test) == predict(modelFit_gbm, vowel.test)
summary(equalPredictions)
mean(equalPredictions)
319/(319+143)
?train
library(e1071)
accuracy()
accuracy
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
## Set up the model
modelFit_rf <- train(diagnosis ~., method="rf", data=training)
modelFit_gbm <- train(diagnosis ~., method="gbm", data=training, verbose = FALSE)
modelFit_lda <- train(diagnosis ~., method="lda", data=training)
## Accuracy
confusionMatrix(testing$diagnosis, predict(modelFit_rf, testing))
confusionMatrix(testing$diagnosis, predict(modelFit_gbm, testing))
confusionMatrix(testing$diagnosis, predict(modelFit_lda, testing))
library(lars)
lasso.fit <- lars(as.matrix(x), y, type="lasso", trace=TRUE)
png(file = "plot.png", width=432, height=432, pointsize=8)
plot(lasso.fit, breaks=FALSE)
legend("topleft", covnames, pch=8, lty=1:length(covnames), col=1:length(covnames))
dev.off()
# This plots the cross validation curve
lasso.cv <- cv.lars(as.matrix(x), y, K=10, type="lasso", trace=TRUE)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
head(training)
set.seed(233)
library(lars)
install.packages("glmnet")
library(lars)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
head(training)
str(training)
set.seed(233)
library(lars)
library(glmnet)
x <- as.matrix(training[, -9])
y <- as.double(as.matrix(training[, 9]))
cv.lasso <- cv.glmnet(x, y, family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
shiny::runApp('Conferences, Competitions, Online Courses/Coursera/Developing Data Products/Machine_Learning')
# Setting up the university seal
library(leaflet)
DLSU_Icon <- makeIcon("https://upload.wikimedia.org/wikipedia/en/thumb/c/c2/De_La_Salle_University_Seal.svg/175px-De_La_Salle_University_Seal.svg.png", iconWidth = 31*215/230, iconHeight = 31, iconAnchorX = 31*215/230/2, iconAnchorY = 16)
# Coordinates of the Manila Campus
Campus_Map <- data.frame(Campus = c("Manila", "Laguna"), lat = c(14.5648,14.2626), long = c(120.9931,121.0429))
# Setting up the interactive map
Campus_Map %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = DLSU_Icon)
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")
data(mtcars)
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")
install.packages("plotly")
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg)
?plot_ly
plot_ly(economics, x = ~date, y = ~pop)
head(economics)
head(economic)
library(ggplot2)
data("economics")
economics
plot_ly(x = ~pop, data = economics, type = "histogram")
library(plotly)
plot_ly(x = ~pop, data = economics, type = "histogram")
?plot_ly
plot_ly(x = ~pop, data = economics, type = "histogram")
head(economics)
plot_ly(x = ~date, y = ~unemploy, data = economics, type="scatter", mode = "lines")
?economics
table(economics$psavert)
plot_ly(x = ~pce, y = ~psavert, data = economics, type="scatter")
plot_ly(x = ~psavert, y = ~pce, data = economics, type="scatter")
p <- plot_ly(x = ~pce, y = ~psavert, data = economics, type="scatter") %>%
layout(title = "Personal Savings and Person Consumption Expenditure",
scene = list(
xaxis = list(title = "Personal Consumption Expenditure"),
yaxis = list(title = "Personal Average Savings Rate")
))
p
?layout
p <- plot_ly(x = ~pce, y = ~psavert, data = economics, type="scatter") %>%
layout(title = "Personal Savings and Person Consumption Expenditure",
xaxis = list(title = "Personal Consumption Expenditure"),
yaxis = list(title = "Personal Average Savings Rate")
)
p
plot_ly(x = ~psavert, y = ~pce, data = economics, type="scatter")
shiny::runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
?submitButton
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
?checkboxInput
?checkboxGroupInput
runApp('Interactive_Data_Science')
names(economics)
var <- "date"
names(economics) - var
names(economics)-var
?print
names(economics, -var)
names(economics, -date)
?names
names(economics)[-var]
names(economics)[-1]
var <- 1
names(economics)[-var]
?dplyr
select(names(economics), -var)
library(dplyr)
select(names(economics), -var)
select(names(economics), -var)
select(names(economics))
names <- select(names(economics), -var)
?deselect
?select
?filter
runApp('Interactive_Data_Science')
?clearNames
?keep
?discard
?keep
install.packages("gdata")
var
var <- "date"
grep(var, names(economics))
grepl(var, names(economics))
grep(var, names(economics))
?grep
grep(var, names(economics), value = FALSE)
grep(var, names(economics), value = TRUE)
grep(var, names(economics), value = TRUE)
!grep(var, names(economics), value = TRUE)
grep(!var, names(economics), value = TRUE)
grep(var, names(economics), value = TRUE)
library(gdata)
keep
keep(names(economics))
!(grep(var, names(economics), value = TRUE))
grep(var, names(economics), value = TRUE)
grep(var, names(economics), value = TRUE, invert = TRUE)
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
?checkboxGroupInput
?selectInput
runApp('Interactive_Data_Science')
?uiOutput
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
?updateSelectInput
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
?switch
runApp('Interactive_Data_Science')
print(input$Variable)
library(shiny)
library(ggplot2)
data(economics)
data("airquality")
data("swiss")
library(datasets)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$result <- renderPrint({
if(input$Data == "Economics"){
economics_lm <- lm(psavert ~., data = economics)
summary(economics_lm)
} else if(input$Data == "Airquality"){
data(airquality)
airquality_lm <- lm(Ozone ~., data = airquality)
summary(airquality_lm)
} else {
data(swiss)
swiss_lm <- lm(Fertility ~., data = swiss)
summary(swiss_lm)
}
})
output$second <- renderUI({
switch(input$Data,
"Economics" = selectInput("Variable", "Choose your dependent variable:",
choices = as.character(names(economics))),
"Airquality" = selectInput("Variable", "Choose your dependent variable:",
choices = as.character(names(airquality))),
"Swiss" = selectInput("Variable", "Choose your dependent variable:",
choices = as.character(names(swiss))))
})
output$third <- renderUI({
switch(input$Variable,
"Economics" = checkboxGroupInput("Variable2", "Choose your predictors:",
choice = as.character(grep(input$Variable, names(economics), value = TRUE, invert = TRUE))),
"Airquality" = checkboxGroupInput("Variable2", "Choose your predictors:",
choice = as.character(grep(input$Variable, names(airquality), value = TRUE, invert = TRUE))),
"Swiss" = checkboxGroupInput("Variable2", "Choose your predictors:",
choice = as.character(grep(input$Variable, names(swiss), value = TRUE, invert = TRUE))))
})
})
print(input$Variable)
runApp('Interactive_Data_Science')
?is.null
?return
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
library(shiny)
runApp(list(ui=shinyUI(fluidPage(
sidebarLayout(
sidebarPanel(
uiOutput("singlefactor")
),
mainPanel(
plotOutput("distPlot")
)
)
))
,
server=shinyServer(function(input, output) {
output$singlefactor <- renderUI({
selectInput("sfactor", "Feature selection:", names(mtcars))
})
output$distPlot <- renderPlot({plot(mtcars[,input$sfactor])})
})
))
library(shiny)
runApp(list(ui=shinyUI(fluidPage(
sidebarLayout(
sidebarPanel(
uiOutput("singlefactor")
),
mainPanel(
plotOutput("distPlot")
)
)
))
,
server=shinyServer(function(input, output) {
output$singlefactor <- renderUI({
selectInput("sfactor", "Feature selection:", names(mtcars))
})
output$distPlot <- renderPlot({plot(mtcars[,input$sfactor])})
})
))
runApp('Practice')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
?checkboxGroupInput
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
?builder
runApp('Interactive_Data_Science')
shiny::runApp('Interactive_Data_Science')
library(plotly)
plotly(mtcars)
plotly(cyl, hp, mtcars)
plotly(~cyl, ~hp, mtcars)
plotly(~cyl, ~hp, data=mtcars)
?plotly
plot_ly(~cyl, ~hp, data=mtcars)
plot_ly(~cyl, ~hp, data=mtcars, type = "scatter")
install.packages("rCharts")
library(rCharts)
require(rCharts)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = "Species", type = "point")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts', force= TRUE)
library(rCharts)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = "Species", type = "point")
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = "Eye", type = "multiBarChart", data = subset(haireye, Sex == "Male"))
n1
?nPlot
??nPlot
?rPlot
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
runApp('Interactive_Data_Science')
